package com.stripe.rainier.core

import com.stripe.rainier.compute._
import com.stripe.rainier.sampler._

trait SBCModel[T] {
  def sbc: SBC[T]
  val warmupIt: Int = 10000
  val syntheticSamples: Int = 1000
  val nSamples: Int = 10
  def sampler(it: Int) =
    new SamplerConfig {
      val iterations = it
      val warmupIterations = warmupIt
      val statsWindow = 100

      def massMatrixTuner(): MassMatrixTuner = new IdentityMassMatrixTuner
      def stepSizeTuner(): StepSizeTuner = new DualAvgTuner(0.8)
      def sampler(): Sampler = new HMCSampler(1)
    }

  def main(args: Array[String]): Unit = {
    implicit val rng: RNG = ScalaRNG(1528673302081L)
    com.stripe.rainier.compute.Log.showSevere
    sbc.animate(syntheticSamples)(sampler)
    println(s"\nnew goldset:")
    println(s"$samples")
    println(s"\ngoldset true value: $trueValue")
    println(
      s"If this run looks good, please update the goldset in your SBCModel")
  }
  val (samples, trueValue) = {
    implicit val rng: RNG = ScalaRNG(1528673302081L)
    val (values, trueValue) = sbc.synthesize(syntheticSamples)
    val (model, real) = sbc.fit(values)
    val samples =
      model.sample(sampler(goldset.size), 1).predict(real)
    (samples, trueValue)
  }

  def goldset: List[Double]
  val description: String
}

/** Continuous **/
object SBCUniformNormal extends SBCModel[Double] {
  def sbc = SBC(Uniform(0, 1))((x: Real) => Normal(x, 1))
  def goldset =
    List(0.38559245562281097, 0.3712272677111183, 0.4314636704310581,
      0.3915804404606292, 0.3603130455126537, 0.43650325529183615,
      0.43650325529183615, 0.48314400080543823, 0.4834837194601785,
      0.4088066144265607, 0.3127979592825627, 0.4122341336153354,
      0.4641027438370279, 0.4641027438370279, 0.38949567271547036,
      0.36712486026292757, 0.37496479337400745, 0.39799849662404424,
      0.3778775050153441, 0.46827315180787604, 0.4024267902817253,
      0.4024267902817253, 0.4024267902817253, 0.3885508935242386,
      0.3885508935242386, 0.3885508935242386, 0.44071452516593007,
      0.44071452516593007, 0.3716737825439214, 0.38276723548471764)

  val description = "Normal(x, 1) with Uniform(0, 1) prior"
}

object SBCLogNormal extends SBCModel[Double] {
  def sbc =
    SBC(LogNormal(0, 1))((x: Real) => LogNormal(x, x))
  def goldset =
    List(0.7876129993618762, 0.8039860248379619, 0.8039860248379619,
      0.7724084167000917, 0.7597648388653503, 0.7639270424413603,
      0.7739452157122433, 0.7643975103998454, 0.8052225422792706,
      0.7784374870304875, 0.7784374870304875, 0.7784374870304875,
      0.7694503579309169, 0.7694503579309169, 0.7694503579309169,
      0.7926053867780568, 0.7926053867780568, 0.7627476073919588,
      0.7672577182108792, 0.7867720304673527, 0.7615084608935543,
      0.7573416208470273, 0.7833957497209061, 0.7423477984208838,
      0.7891934460563965, 0.7491243235848334, 0.811224626530749,
      0.7910272618635428, 0.7910272618635428, 0.7723867389094562)

  val description = "LogNormal(x, x) with LogNormal(0, 1) prior"
}

object SBCExponential extends SBCModel[Double] {
  def sbc =
    SBC(LogNormal(0, 1))((x: Real) => Exponential(x))
  def goldset =
    List(0.7561035973622721, 0.7704418640316897, 0.7704418640316897,
      0.7639009472587807, 0.7845038268277297, 0.7845038268277297,
      0.8303816507636362, 0.8307258483477908, 0.8307258483477908,
      0.7993933271402323, 0.7993933271402323, 0.77155992392896,
      0.8225469002955375, 0.7591275150811903, 0.8685076935575304,
      0.752263824919315, 0.752263824919315, 0.7499313640378203,
      0.7779817197118736, 0.7632936898296592, 0.7823724801924784)

  val description = "Exponential(x) with LogNormal(0, 1) prior"
}

object SBCLaplace extends SBCModel[Double] {
  def sbc = SBC(LogNormal(0, 1))((x: Real) => Laplace(x, x))
  def goldset =
    List(0.7665870533655806, 0.7771918782780223, 0.7826658141159224,
      0.7463278049806356, 0.7463278049806356, 0.7777822121684287,
      0.7777822121684287, 0.7607952843373422, 0.7669053332829671,
      0.7567374011031458, 0.7864207532365034, 0.773731485316704,
      0.773731485316704, 0.762852833306023, 0.7694597779419526,
      0.7694597779419526, 0.751394807791856, 0.7561147974777312,
      0.7388438433699926, 0.7789359992969133, 0.764005071071782)

  val description = "Laplace(x, x) with LogNormal(0, 1) prior"
}

object SBCGamma extends SBCModel[Double] {
  def sbc = SBC(LogNormal(0, 1))((x: Real) => Gamma(x, x))
  def goldset =
    List(0.7659171894484462, 0.7649985986646488, 0.7535637316549387,
      0.7535637316549387, 0.7502130677668034, 0.7496268515570994,
      0.7721944653676225, 0.7342871203324542, 0.7642765095223808,
      0.7684522145463429, 0.7684522145463429, 0.7684522145463429,
      0.7535904654344245, 0.7535904654344245, 0.7622439011825517,
      0.7530012182042063, 0.7445240834744641, 0.7675384920967042,
      0.7649288881331839, 0.7669400149420441, 0.7669400149420441)

  val description = "Gamma(x, x) with LogNormal(0, 1) prior"
}

/** Discrete **/
object SBCBernoulli extends SBCModel[Long] {
  def sbc =
    SBC(Uniform(0, 1))((x: Real) => Bernoulli(x))
  def goldset =
    List(0.4683582589035704, 0.4721759087172541, 0.43616531357721816,
      0.43616531357721816, 0.46658691281487297, 0.46658691281487297,
      0.4510666265312254, 0.45800335665956543, 0.4486758822704966,
      0.47454411387216594, 0.4623526106580697, 0.44267414372912883,
      0.45346462589302095, 0.4601305668436454, 0.4601305668436454,
      0.44357346603829345, 0.44645578975742717, 0.44645578975742717,
      0.4692754296518735, 0.4543186566320888, 0.4543186566320888,
      0.44062255483430307, 0.4644356960002178, 0.4644356960002178,
      0.44963670211809087, 0.47136715732868806, 0.44604953443480616,
      0.4513223955123151, 0.4513223955123151, 0.4513223955123151)

  val description = "Bernoulli(x) with Uniform(0, 1) prior"
}

object SBCBinomial extends SBCModel[Long] {
  def sbc =
    SBC(Uniform(0, 1))((x: Real) => Binomial(x, 10))
  def goldset =
    List(0.47006716976353746, 0.4612249341647834, 0.45139039821809307,
      0.45371721480868493, 0.454026946236566, 0.454026946236566,
      0.4512043642773413, 0.46169896108999936, 0.4556610506323254,
      0.4556610506323254, 0.45308975391474343, 0.45308975391474343,
      0.4520793848017953, 0.4611221263304432, 0.45361124898787997,
      0.44365930590685015, 0.45327825475209305, 0.44631176284390095,
      0.44999464427693436, 0.44744901685148125, 0.4565122124191864,
      0.4565122124191864, 0.46123166578477337, 0.46123166578477337,
      0.4686700041353088, 0.4550095388558221, 0.4550095388558221,
      0.4460819363927457, 0.45748793688138334, 0.4528295581762569)

  val description = "Binomial(x, 10) with Uniform(0, 1) prior"
}

object SBCGeometric extends SBCModel[Long] {
  def sbc =
    SBC(Uniform(0, 1))((x: Real) => Geometric(x))
  def goldset =
    List(0.43565921439778293, 0.4381456315623461, 0.41472703751318857,
      0.41472703751318857, 0.4344972113838473, 0.4344972113838473,
      0.4244154507612952, 0.4289208870109056, 0.42285938034677834,
      0.4396805696976958, 0.43175312461036125, 0.41895907775852426,
      0.4259659069683726, 0.4303046381816167, 0.4303046381816167,
      0.41954289100288944, 0.4214095943676822, 0.4214095943676822,
      0.43624973645941334, 0.42653002263536877, 0.42653002263536877,
      0.41762215501539124, 0.4330989742750938, 0.4330989742750938,
      0.4234855976189227, 0.43761314937776463, 0.42115392540389046,
      0.4245747224144284, 0.4245747224144284, 0.4245747224144284)

  val description = "Geometric(x) with Uniform(0, 1) prior"
}

object SBCGeometricZeroInflated extends SBCModel[Long] {
  def sbc =
    SBC(Uniform(0, 1))((x: Real) => Geometric(.3).zeroInflated(x))
  def goldset =
    List(0.40205540767799497, 0.3935137779899781, 0.40252656357960287,
      0.46141116125945636, 0.40802311244793044, 0.44760730504033946,
      0.44760730504033946, 0.4228646014221477, 0.4499818317608028,
      0.4155078054739654, 0.43581810754987366, 0.43581810754987366,
      0.4421363964184585, 0.41360562267212425, 0.4284590639310187,
      0.42407658012190436, 0.44473157738844654, 0.4273266712910911,
      0.4200350905548432, 0.4891602032775004, 0.4017186018704884,
      0.4017186018704884, 0.43791454913416455, 0.45986328897975126,
      0.43548221284395305, 0.4074316314285286, 0.43413337679249997,
      0.43413337679249997, 0.4563394026476256, 0.41452274109461346)

  val description = "Geometric(.3).zeroInflated(x) with Uniform(0, 1) prior"
}

object SBCNegativeBinomial extends SBCModel[Long] {
  def sbc =
    SBC(Uniform(0, 1))((x: Real) => NegativeBinomial(x, 10))
  def goldset =
    List(0.4675827113967581, 0.4610808209900679, 0.45383510931385357,
      0.455545570074039, 0.4557733401125095, 0.4557733401125095,
      0.45369490073831337, 0.4614197289939736, 0.45697905130669175,
      0.45697905130669175, 0.45508377155115504, 0.45508377155115504,
      0.4543392854681217, 0.4609952553233719, 0.45546965447196014,
      0.44813556044408515, 0.45522554263875514, 0.4500907061760401,
      0.4528055582333297, 0.4509288837548244, 0.4576039855191303,
      0.4576039855191303, 0.4610764405472344, 0.4610764405472344,
      0.4665496146948323, 0.45650487764877157, 0.45650487764877157,
      0.44992188368242464, 0.45832286388084004, 0.454892611632889)

  val description = "NegativeBinomial(x, 10) with Uniform(0, 1) prior"
}

object SBCBinomialPoissonApproximation extends SBCModel[Long] {
  def sbc =
    SBC(Uniform(0, 0.04))((x: Real) => Binomial(x, 200))
  def goldset =
    List(0.01747439370396917, 0.0179851314434439, 0.01801432225104397,
      0.01801432225104397, 0.01775860967052194, 0.01775860967052194,
      0.01775860967052194, 0.018085520861813004, 0.017677185584304828,
      0.017798723947259044, 0.017798723947259044, 0.017254195477537117,
      0.017254742897795355, 0.01790332150336637, 0.01740880800169971,
      0.017207570868315973, 0.01733515583079138, 0.017951765149328582,
      0.017264043363592538, 0.01716990864007625, 0.017610181435341293,
      0.016988558891501884, 0.018021583460307296, 0.017533663151471618,
      0.017395434462519583, 0.017395434462519583, 0.01762605683452171,
      0.017650114842235977, 0.017633910861748033, 0.017633910861748033)

  val description =
    "Poisson approximation to Binomial: Binomial(x, 200) with Uniform(0, 0.04) prior"
}

object SBCBinomialNormalApproximation extends SBCModel[Long] {
  def sbc =
    SBC(Uniform(0.4, 0.6))((x: Real) => Binomial(x, 300))
  def goldset =
    List(0.3849093699203164, 0.3822629591199987, 0.38374303903059914,
      0.3832324864849272, 0.38389219985327067, 0.3835866724851299,
      0.3830818707173923, 0.3835660923949862, 0.3841609845229018,
      0.3820783526940713, 0.3849827665275495, 0.38236510331364865,
      0.3838715727269887, 0.3840183371678221, 0.3828960655858176,
      0.3841785878664216, 0.3827156431825414, 0.38488715647596444,
      0.38157319616823965, 0.38511364643858215, 0.3819850513881394,
      0.3857373545069211, 0.3818792213826954, 0.38587080685826664,
      0.3813170524170525, 0.38588405883758004, 0.3809126103183984,
      0.38614580147352096, 0.38091354056091625, 0.3841577712144981)
  val description =
    "Normal approximation to Binomial: Binomial(x, 200) with Uniform(0.4, 0.6) prior"

}

object SBCLargePoisson extends SBCModel[Long] {
  def sbc =
    SBC(Uniform(0.8, 1))((x: Real) => Poisson(x * 1000))
  def goldset =
    List(0.8902563444072734, 0.8869359066465492, 0.8886950446151526,
      0.8878460087685136, 0.8889820690666947, 0.8889820690666947,
      0.8872608466505054, 0.8879959391790976, 0.8904655035022917,
      0.8876132090833789, 0.8890414912380378, 0.8890414912380378,
      0.8890414912380378, 0.8885992817415851, 0.8905010971652382,
      0.8871018046085857, 0.8895232425351554, 0.8897587877346655,
      0.8903702511720705, 0.8886568587604922, 0.8886568587604922)

  val description =
    "Poisson(x*1000) with Uniform(0.8, 1) prior"
}
