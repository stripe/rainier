package com.stripe.rainier.core

import com.stripe.rainier.compute._
import com.stripe.rainier.sampler._

trait SBCModel {
  implicit val rng: RNG = ScalaRNG(1528673302081L)
  def sbc: SBC[_, _]
  val sampler: Sampler = HMC(1)
  val warmupIterations: Int = 10000
  val syntheticSamples: Int = 1000
  val nSamples: Int = 10
  def main(args: Array[String]): Unit = {
    sbc.animate(sampler, warmupIterations, syntheticSamples)
    println(s"\nnew goldset:")
    println(s"$samples")
    println(
      s"If this run looks good, please update the goldset in your SBCModel")
  }
  val samples: List[_] = sbc.posteriorSamples(goldset.size)
  def goldset: List[_]
  val description: String
}

/** Continuous **/
object SBCUniformNormal extends SBCModel {
  def sbc = SBC[Double, Continuous](Uniform(0, 1))((x: Real) => Normal(x, 1))
  def goldset =
    List(0.35818959913866283, 0.3685147819648234, 0.3685147819648234,
      0.3669859561146319, 0.36989451411848984, 0.3624556907281655,
      0.38074741233119874, 0.3382733069328959, 0.4031104546210269,
      0.3250652723154606, 0.41551845886984484, 0.3289349060007132,
      0.42220376103556184, 0.3267579818189939, 0.4249317876752757,
      0.4249317876752757, 0.31930733649606835, 0.4358537449845737,
      0.31896075482145797, 0.31896075482145797, 0.42249463520838787,
      0.42249463520838787, 0.32913664163852674, 0.42262656502072576,
      0.3279944851500966, 0.4191724458217692, 0.3315056814059948,
      0.41728717387168923, 0.3331060964196602, 0.4086888775378336)
  val description = "Normal(x, 1) with Uniform(0, 1) prior"
}

object SBCLogNormal extends SBCModel {
  def sbc =
    SBC[Double, Continuous](LogNormal(0, 1))((x: Real) => LogNormal(x, x))
  def goldset =
    List(0.1320352047376991, 0.1278465305184665, 0.13045570289226482,
      0.12809334825262858, 0.1302285851887811, 0.12971488966061975,
      0.12858030863741665, 0.12974670510210187, 0.12864963330710052,
      0.13046537194900923, 0.12880773413827598, 0.12985465134247504,
      0.12844225339631635, 0.1313974020144121, 0.12744884255033428,
      0.1311196525734243, 0.12853622813696675, 0.12853622813696675,
      0.12977895561929287, 0.12907650766771345, 0.12983463336804282,
      0.12873418321929223, 0.12873418321929223, 0.13013268941844386,
      0.12923546640482494, 0.12958663528945488, 0.12958663528945488,
      0.1300053138358873, 0.12979024604560313, 0.12983475193607927)
  val description = "LogNormal(x, x) with LogNormal(0, 1) prior"
}

/**
  * Note: SBCExponential and SBCLaplace are made-up goldsets. SBC on these is wildly slow.
  */
object SBCExponential extends SBCModel {
  def sbc =
    SBC[Double, Continuous](LogNormal(0, 1))((x: Real) => Exponential(x))
  def goldset =
    List(0.4265683630081846, 0.5189050953677488, 0.49924580068677044,
      0.3879796746979638, 0.4341114186909587, 0.4341114186909587,
      0.46249827359385365, 0.5153090873282923, 0.44657645973736837,
      0.4818619620463942, 0.43936322908013287, 0.4437800418959559,
      0.367162365055694, 0.367162365055694, 0.367162365055694,
      0.367162365055694, 0.367162365055694, 0.4330711704882621,
      0.4330711704882621, 0.5628095742189261, 0.45466790056406947)
  val description = "Exponential(x) with LogNormal(0, 1) prior"
}

object SBCLaplace extends SBCModel {
  def sbc = SBC[Double, Continuous](LogNormal(0, 1))((x: Real) => Laplace(x, x))
  def goldset =
    List(0.4265683630081846, 0.5189050953677488, 0.49924580068677044,
      0.3879796746979638, 0.4341114186909587, 0.4341114186909587,
      0.46249827359385365, 0.5153090873282923, 0.44657645973736837,
      0.4818619620463942, 0.43936322908013287, 0.4437800418959559,
      0.367162365055694, 0.367162365055694, 0.367162365055694,
      0.367162365055694, 0.367162365055694, 0.4330711704882621,
      0.4330711704882621, 0.5628095742189261, 0.45466790056406947)
  val description = "Laplace(x, x) with LogNormal(0, 1) prior"
}

/** Discrete **/
object SBCBernoulli extends SBCModel {
  def sbc =
    SBC[Int, Discrete](Uniform(0, 1))((x: Real) => Bernoulli(x))
  def goldset =
    List(0.3686994194106302, 0.3805855539697598, 0.3637900518424356,
      0.38187387166073206, 0.35997387223646293, 0.3861582426323819,
      0.3861582426323819, 0.35911251129974553, 0.3795732725871102,
      0.3795732725871102, 0.3670899381162477, 0.3841239227363827,
      0.35853272507584494, 0.38742062115220743, 0.35953154958641215,
      0.37960822629301033, 0.37960822629301033, 0.3706125117869763,
      0.37216680517645845, 0.3594112344311761, 0.38932226541712844,
      0.3589249772594995, 0.39029664375284945, 0.3555343574351027,
      0.386973197745117, 0.35817333118693856, 0.3837617377458774,
      0.3570954696353796, 0.3570954696353796, 0.38909055759598127)
  val description = "Bernoulli(x) with Uniform(0, 1) prior"
}

object SBCBinomial extends SBCModel {
  def sbc =
    SBC[Int, Discrete](Uniform(0, 1))((x: Real) => Binomial(x, 10))
  def goldset =
    List(0.38281922262650914, 0.3776206779228442, 0.38492617804546514,
      0.376048955617945, 0.38441249483360224, 0.37511927205841705,
      0.3863944723488409, 0.37530698971697735, 0.3830900421777147,
      0.37920108410150194, 0.3814333911289909, 0.378466562559125,
      0.3837625393721316, 0.37400386887192244, 0.38700432093280823,
      0.3738011955674643, 0.38725838373114224, 0.38725838373114224,
      0.37482396199717344, 0.3866476888087414, 0.37411585987862733,
      0.38430760013327975, 0.3747656798205283, 0.38353256841211714,
      0.3769114099300919, 0.3833412920502743, 0.3780229288686798,
      0.3826161285664129, 0.37814561725977486, 0.38530569380314383)
  val description = "Binomial(x, 10) with Uniform(0, 1) prior"
}

object SBCGeometric extends SBCModel {
  def sbc =
    SBC[Int, Discrete](Uniform(0, 1))((x: Real) => Geometric(x))
  def goldset =
    List(0.38210615190431674, 0.38457304941437737, 0.3874735687678494,
      0.3834171463336912, 0.39008964512030625, 0.38055127780425485,
      0.38055127780425485, 0.3910822634723702, 0.3835132167356132,
      0.391980964809768, 0.391980964809768, 0.37159494580535085,
      0.4018297013445793, 0.3696639866034302, 0.40088879553564793,
      0.3740010106098418, 0.3740010106098418, 0.39138456658253484,
      0.381561681225264, 0.394549777087708, 0.3736274438341384,
      0.3955008623769594, 0.3955008623769594, 0.3763121621647155,
      0.3967238898641016, 0.37547314284190525, 0.3978429081873377,
      0.3765465888585022, 0.39026052841111303, 0.3804160197228567)
  val description = "Geometric(x) with Uniform(0, 1) prior"
}

object SBCGeometricZeroInflated extends SBCModel {
  def sbc =
    SBC[Int, Discrete](Uniform(0, 1))((x: Real) =>
      Geometric(.3).zeroInflated(x))
  def goldset =
    List(0.3682741265983013, 0.3852529612682177, 0.3604238333388064,
      0.386596856795002, 0.3555033555350904, 0.39217253775032623,
      0.39217253775032623, 0.3550136947273093, 0.38182164324962603,
      0.38182164324962603, 0.36722421685006434, 0.3902898312064711,
      0.3531099114009195, 0.3942443064061138, 0.35565699293349323,
      0.38180128466000113, 0.38180128466000113, 0.37379355799257075,
      0.3692587358496806, 0.3588953235783851, 0.3931958168156864,
      0.3585549007172857, 0.39441682029588876, 0.353399981549561,
      0.38860439210841013, 0.35795264331182514, 0.38336146622540296,
      0.35691143054863744, 0.35691143054863744, 0.39069497264393727)
  val description = "Geometric(.3).zeroInflated(x) with Uniform(0, 1) prior"
}

object SBCNegativeBinomial extends SBCModel {
  def sbc =
    SBC[Int, Discrete](Uniform(0, 1))((x: Real) => NegativeBinomial(x, 10))
  def goldset =
    List(0.3849093699203164, 0.3822629591199987, 0.38374303903059914,
      0.3832324864849272, 0.38389219985327067, 0.3835866724851299,
      0.3830818707173923, 0.3835660923949862, 0.3841609845229018,
      0.3820783526940713, 0.3849827665275495, 0.38236510331364865,
      0.3838715727269887, 0.3840183371678221, 0.3828960655858176,
      0.3841785878664216, 0.3827156431825414, 0.38488715647596444,
      0.38157319616823965, 0.38511364643858215, 0.3819850513881394,
      0.3857373545069211, 0.3818792213826954, 0.38587080685826664,
      0.3813170524170525, 0.38588405883758004, 0.3809126103183984,
      0.38614580147352096, 0.38091354056091625, 0.3841577712144981)
  val description = "NegativeBinomial(x, 10) with Uniform(0, 1) prior"
}

object SBCBinomialPoissonApproximation extends SBCModel {
  def sbc =
    SBC[Int, Discrete](Uniform(0, 0.04))((x: Real) => Binomial(x, 200))
  def goldset =
    List(0.01437965131458683, 0.01578957323990151, 0.014378943172332577,
      0.01579452314206778, 0.014408284611760946, 0.014408284611760946,
      0.014408284611760946, 0.01579695429766487, 0.014399749059944457,
      0.01577883628461712, 0.014443567412165279, 0.01577794761410645,
      0.014399884651961322, 0.015771604231464155, 0.014396812614110355,
      0.015779030927204264, 0.014476956331790476, 0.01571661487405139,
      0.01571661487405139, 0.01451511458170912, 0.015672414919592568,
      0.014567756985524214, 0.014567756985524214, 0.015603457904550224,
      0.014570473856504987, 0.015603903791293823, 0.014571255976197284,
      0.015611357268078321, 0.014562659010452075, 0.015625430976931285)
  val description =
    "Poisson approximation to Binomial: Binomial(x, 200) with Uniform(0, 0.04) prior"
}

object SBCBinomialNormalApproximation extends SBCModel {
  def sbc =
    SBC[Int, Discrete](Uniform(0.4, 0.6))((x: Real) => Binomial(x, 300))
  def goldset =
    List(0.01437965131458683, 0.01578957323990151, 0.014378943172332577,
      0.01579452314206778, 0.014408284611760946, 0.014408284611760946,
      0.014408284611760946, 0.01579695429766487, 0.014399749059944457,
      0.01577883628461712, 0.014443567412165279, 0.01577794761410645,
      0.014399884651961322, 0.015771604231464155, 0.014396812614110355,
      0.015779030927204264, 0.014476956331790476, 0.01571661487405139,
      0.01571661487405139, 0.01451511458170912, 0.015672414919592568,
      0.014567756985524214, 0.014567756985524214, 0.015603457904550224,
      0.014570473856504987, 0.015603903791293823, 0.014571255976197284,
      0.015611357268078321, 0.014562659010452075, 0.015625430976931285)
  val description =
    "Normal approximation to Binomial: Binomial(x, 200) with Uniform(0.4, 0.6) prior"
}
